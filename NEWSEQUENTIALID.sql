-- newsequentialid has lower scope , increaments per machine not per system
create TABLE [dbo].[Products2] (
	[ProductID] uniqueidentifier NOT NULL,
	[ProductName] [nvarchar](40) NOT NULL
)

alter table products2
add constraint def_ProductID
default NEWSEQUENTIALID() FOR [ProductID]

alter table products2
add constraint un_ProductID
unique (  [ProductID]  )


insert into Products2 (ProductName) values ('fsds')
select distinct productname, left ( cast ( ProductID as nvarchar(100)  ), 5) from Products2



alter table products 
add  discontinued uniqueidentifier 
alter table products
add constraint def_discontinued
default NEWSEQUENTIALID() FOR discontinued

INSERT INTO PRODUCTS (ProductID, PRODUCTNAME, supplierid, categoryId) 
VALUES ( 200, 'prodct', 1 ,1) 
select * from products
select NEWID() as myguid
select NEWSEQUENTIALID() as myguid

select @@IDENTITY
select SCOPE_IDENTITY()
--SCOPE_IDENTITY returns the last IDENTITY 
--value inserted into an IDENTITY column in the same scope

--The @@IDENTITY is a system function that returns the
-- last IDENTITY value generated for any table with
--  an identity column under the current session, regardless of the 
--scope of the T-SQL statement that generated the value.

--Creates a GUID that is greater than any GUID 
--previously generated by this function on a specified 
--computer since Windows was started. After restarting Windows, 
--the GUID can start again from a lower range, but is still globally 
--unique. When a GUID column is used as a row identifier, 
--using NEWSEQUENTIALID can be faster than using the NEWID function. 
--This is because the NEWID function causes random activity and 
--uses fewer cached data pages. Using NEWSEQUENTIALID 
--also helps to completely fill the data and index pages


--The NEWID() function in SQL Server creates a unique
-- value of type uniqueidentifier. One use of the NEWID() 
--function is in generating random rows from a table.
